"""
Student information for this assignment:

Replace <FULL NAME> with your name.
On my/our honor, Caroline Zhuang, this
programming assignment is my own work and I have not provided this code to
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1: cz7828
"""

from abc import ABC, abstractmethod
import random

DAILY_EXPENSE = 60
HAPPINESS_THRESHOLD = 50
MANAGER_BONUS = 1000
TEMP_EMPLOYEE_PERFORMANCE_THRESHOLD = 50
PERM_EMPLOYEE_PERFORMANCE_THRESHOLD = 25
RELATIONSHIP_THRESHOLD = 10
INITIAL_PERFORMANCE = 75
INITIAL_HAPPINESS = 50
PERCENTAGE_MAX = 100
PERCENTAGE_MIN = 0
SALARY_ERROR_MESSAGE = "Salary must be non-negative."


class Employee(ABC):
    """
    Abstract base class representing a generic employee in the system.
    """
    def __init__(self, name, manager, salary, savings):
        self.relationships = {}
        self.savings = savings
        self.is_employed = True
        self.__name = name
        self.__manager = manager
        self.performance = INITIAL_PERFORMANCE
        self.happiness = INITIAL_HAPPINESS
        if salary <0:
            raise ValueError(SALARY_ERROR_MESSAGE)
        else:
            self.salary = salary
    @property
    def name(self):
        """
        Read-only variable
        """
        return self.__name
    @property
    def manager(self):
        """
        Read-only variable
        """
        return self.__manager
    @property
    def performance(self):
        """
        Getter for performance
        """
        return self._performance

    @performance.setter
    def performance(self, value):
        """ 
        Making sure it is in between 0 and 100 
        """
        self._performance = max(PERCENTAGE_MIN, min(PERCENTAGE_MAX, value))

    @property
    def happiness(self):
        """
        Getter for happiness 
        """
        return self._happiness

    @happiness.setter
    def happiness(self, value):
        """
        Making sure it's between 0 and 100 
        """
        self._happiness = max(PERCENTAGE_MIN, min(PERCENTAGE_MAX, value))
    @property
    def salary(self):
        return self._salary

    @salary.setter
    def salary(self, value):
        if value < 0:
            raise ValueError("Salary must be non-negative.")
        self._salary = value


    @abstractmethod
    def work(self):
        """
        Abstract method 
        """
    def interact(self, other):
        """
        Simulates interaction between this employee and another employee
        """
        if other.name not in self.relationships:
            self.relationships[other.name] = 0
        if self.relationships[other.name] > RELATIONSHIP_THRESHOLD:
            self.happiness += 1
        elif self.happiness >= HAPPINESS_THRESHOLD and other.happiness >= HAPPINESS_THRESHOLD:
            self.relationships[other.name] += 1
        else:
            self.relationships[other.name] -= 1
            self.happiness -= 1
    def daily_expense(self):
        """
        Simulates employee's daily expenses by reducing happiness and savings
        """
        self.happiness -= 1
        self.savings -= DAILY_EXPENSE
    def __str__(self):
        self_string = f"{self.__name}\n" + f"\tSalary: ${self.salary}\n" + \
            f"\tSavings: ${self.savings}\n" + f"\tHappiness: {self.happiness}%\n" + \
            f"\tPerformance: {self.performance}%"
        return self_string

class Manager(Employee):
    """
    A subclass of Employee representing a manager.
    """
    def work(self):
        """
        Simulates one hour of work
        """
        change = random.randint(-5,5)
        self.performance += change
        if change < 0:
            self.happiness -= 1
            for key in self.relationships:
                self.relationships[key] -= 1
        else:
            self.happiness += 1

class TemporaryEmployee(Employee):
    """
    A subclass of Employee representing a temporary employee.
    """
    def work(self):
        """
        Simulates one hour of work
        """
        change = random.randint(-15,15)
        self.performance += change
        if change < 0:
            self.happiness -= 2
        else:
            self.happiness += 1
    def interact(self,other):
        super().interact(other)
        if type(other) is Manager:
            if other.happiness > HAPPINESS_THRESHOLD and \
            self.performance >= TEMP_EMPLOYEE_PERFORMANCE_THRESHOLD:
                self.savings += MANAGER_BONUS
            elif other.happiness <= HAPPINESS_THRESHOLD:
                self.salary = self.salary // 2
                self.happiness -= 5
                if self.salary == 0:
                    self.is_employed = False

class PermanentEmployee(Employee):
    """
    A subclass of Employee representing a permanent employee.
    """
    def work(self):
        """
        Simulates an hour of work
        """
        change = random.randint(-10,10)
        self.performance += change
        if change >= 0:
            self.happiness += 1
    def interact(self,other):
        """
        Simulates interaction with another employee
        """
        super().interact(other)
        if type(other) is Manager:
            if other.happiness > HAPPINESS_THRESHOLD and \
            self.performance > PERM_EMPLOYEE_PERFORMANCE_THRESHOLD:
                self.savings += MANAGER_BONUS
            elif other.happiness <= HAPPINESS_THRESHOLD:
                self.happiness -= 1
